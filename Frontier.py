# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14gjbC9pwPVea0Oa8gksg5tuwOZSrfUmC
"""

import pandas as pd
import pandas_datareader.data as pdr
import numpy as np
import requests
import yfinance as yf
import datetime as dt

start=dt.datetime(2010,1,1)
end=dt.datetime.now()

data1=pd.read_csv('Ticker.csv')
ticker_data=data1['Company'].tolist()
ticker_data

"""# New Section

# New Section
"""

yf.pdr_override()

#tickers=['Reliance.NS','Kotakbank.NS','HDFCbank.NS','INFY.NS','ITC.NS']
tickers=ticker_data
data_df=pd.DataFrame()

for ticker in tickers:
  df=pdr.get_data_yahoo(ticker,start,end)
  data_df[ticker]=df['Adj Close']

data_df

pip install PyPortfolioOpt

assets=data_df.columns

from pypfopt import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

mu = expected_returns.mean_historical_return(data_df)
S = risk_models.sample_cov(data_df)



ef = EfficientFrontier(mu, S)
raw_weights = ef.max_sharpe()  #Gives weights for all shares

#Filter weights into only investable stocks
cleaned_weights = ef.clean_weights()

cleaned_weights

ef.portfolio_performance(verbose=True)

# Getting discrete allocation data

from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices


latest_prices = get_latest_prices(data_df)

weights=cleaned_weights
da = DiscreteAllocation(weights, latest_prices, total_portfolio_value=1000000)
allocation, leftover = da.greedy_portfolio()
print("Discrete allocation:", allocation)
print("Funds remaining: ${:.2f}".format(leftover))

allocation

